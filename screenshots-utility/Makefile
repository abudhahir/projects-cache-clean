# üì∏ Screenshot Generation Makefile

# Colors
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m

.PHONY: help install setup screenshots test clean validate benchmark all

help: ## Show this help message
	@echo "üì∏ Cache Remover Screenshot Utility"
	@echo "=================================="
	@echo ""  
	@echo "Available targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(BLUE)%-15s$(NC) %s\n", $$1, $$2}'

install: ## Install VHS (required for screenshot generation)
	@echo "$(YELLOW)üì¶ Installing VHS...$(NC)"
	go install github.com/charmbracelet/vhs@latest
	@echo "$(GREEN)‚úÖ VHS installed$(NC)"

setup: ## Setup test data for screenshots
	@echo "$(YELLOW)üèóÔ∏è Setting up test data...$(NC)"
	./setup-test-data.sh
	@echo "$(GREEN)‚úÖ Test data ready$(NC)"

screenshots: ## Generate all screenshots
	@echo "$(YELLOW)üì∏ Generating all screenshots...$(NC)"
	./generate.sh
	@echo "$(GREEN)‚úÖ Screenshots generated$(NC)"

test: ## Run screenshot generation tests
	@echo "$(YELLOW)üß™ Running screenshot tests...$(NC)"
	cd .. && GENERATE_SCREENSHOTS=1 go test -v ./screenshots-utility/
	@echo "$(GREEN)‚úÖ Tests completed$(NC)"

benchmark: ## Benchmark screenshot generation performance
	@echo "$(YELLOW)‚è±Ô∏è Running screenshot benchmarks...$(NC)"
	cd .. && BENCHMARK_SCREENSHOTS=1 go test -v -bench=. ./screenshots-utility/
	@echo "$(GREEN)‚úÖ Benchmarks completed$(NC)"

validate: ## Validate generated screenshots
	@echo "$(YELLOW)üîç Validating screenshots...$(NC)"
	@if [ ! -d "screenshots" ]; then \
		echo "$(RED)‚ùå Screenshots directory not found. Run 'make screenshots' first.$(NC)"; \
		exit 1; \
	fi
	@count=$$(ls -1 screenshots/*.gif 2>/dev/null | wc -l); \
	if [ $$count -eq 0 ]; then \
		echo "$(RED)‚ùå No screenshot files found$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ Found $$count screenshot files$(NC)"
	@du -sh screenshots/
	@ls -la screenshots/*.gif

clean: ## Clean generated screenshots and test data
	@echo "$(YELLOW)üßπ Cleaning up...$(NC)"
	rm -rf screenshots/  
	rm -rf ../demo-projects/
	@echo "$(GREEN)‚úÖ Cleanup completed$(NC)"

quick: setup screenshots validate ## Quick workflow: setup + generate + validate
	@echo "$(GREEN)üöÄ Quick screenshot generation completed!$(NC)"

all: install setup screenshots test validate ## Full workflow: install + setup + generate + test + validate
	@echo "$(GREEN)üéâ Full screenshot generation workflow completed!$(NC)"

# Individual screenshot targets
basic-usage: ## Generate basic usage screenshot only
	@echo "$(YELLOW)üì∏ Generating basic usage screenshot...$(NC)"
	cd .. && vhs screenshots-utility/tapes/basic-usage.tape

dry-run: ## Generate dry-run screenshot only
	@echo "$(YELLOW)üì∏ Generating dry-run screenshot...$(NC)"
	cd .. && vhs screenshots-utility/tapes/dry-run.tape

verbose: ## Generate verbose mode screenshot only
	@echo "$(YELLOW)üì∏ Generating verbose screenshot...$(NC)"
	cd .. && vhs screenshots-utility/tapes/verbose.tape

interactive: ## Generate interactive mode screenshot only
	@echo "$(YELLOW)üì∏ Generating interactive screenshot...$(NC)"
	cd .. && vhs screenshots-utility/tapes/interactive.tape

ui-demo: ## Generate TUI demo screenshot only
	@echo "$(YELLOW)üì∏ Generating TUI demo screenshot...$(NC)"
	cd .. && vhs screenshots-utility/tapes/ui-demo.tape

performance: ## Generate performance demo screenshot only
	@echo "$(YELLOW)üì∏ Generating performance screenshot...$(NC)"
	cd .. && vhs screenshots-utility/tapes/performance.tape

quickstart: ## Generate quickstart workflow screenshot only
	@echo "$(YELLOW)üì∏ Generating quickstart screenshot...$(NC)"
	cd .. && vhs screenshots-utility/tapes/quickstart.tape

# Development targets
dev-setup: ## Setup for development (installs VHS + builds binary)
	@echo "$(YELLOW)üîß Setting up development environment...$(NC)"
	@$(MAKE) install
	@cd .. && go build -o cache-remover
	@$(MAKE) setup
	@echo "$(GREEN)‚úÖ Development environment ready$(NC)"

watch: ## Watch for changes and regenerate screenshots (requires entr)
	@echo "$(YELLOW)üëÄ Watching for changes...$(NC)"
	@if ! command -v entr >/dev/null 2>&1; then \
		echo "$(RED)‚ùå 'entr' is required for watch mode. Install with: brew install entr$(NC)"; \
		exit 1; \
	fi
	find tapes/ -name "*.tape" | entr -r make screenshots

# CI/CD targets  
ci-test: ## Run tests suitable for CI environment
	@echo "$(YELLOW)ü§ñ Running CI tests...$(NC)"
	@if ! command -v vhs >/dev/null 2>&1; then \
		echo "$(YELLOW)‚ö†Ô∏è VHS not found, installing...$(NC)"; \
		$(MAKE) install; \
	fi
	@cd .. && go build -o cache-remover
	@$(MAKE) setup
	@cd .. && GENERATE_SCREENSHOTS=1 go test -v -timeout 10m ./screenshots-utility/

# Information targets
info: ## Show system information and requirements
	@echo "$(BLUE)üìã System Information$(NC)"
	@echo "===================="
	@echo "Go version: $$(go version 2>/dev/null || echo 'Not installed')"
	@echo "VHS version: $$(vhs --version 2>/dev/null || echo 'Not installed')"
	@echo "Cache remover: $$([ -f ../cache-remover ] && echo 'Built' || echo 'Not built')"
	@echo "Test data: $$([ -d ../demo-projects ] && echo 'Ready' || echo 'Not setup')"
	@echo "Screenshots: $$([ -d screenshots ] && ls -1 screenshots/*.gif 2>/dev/null | wc -l || echo '0') files"

size: ## Show screenshot file sizes
	@if [ -d "screenshots" ]; then \
		echo "$(BLUE)üìä Screenshot Sizes$(NC)"; \
		echo "=================="; \
		du -h screenshots/*.gif 2>/dev/null | sort -hr || echo "No screenshots found"; \
		echo ""; \
		echo "Total: $$(du -sh screenshots/ 2>/dev/null | cut -f1)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è No screenshots directory found$(NC)"; \
	fi